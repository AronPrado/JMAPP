Index: app/src/main/java/com/javierprado/jmapp/data/entities/Aula.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.javierprado.jmapp.data.entities\r\n\r\nimport java.io.Serializable\r\n\r\n\r\nclass Aula: Serializable {\r\n    var id: String = \"\"\r\n    val grado: String = \"\"\r\n    val nivelEducativo: String = \"\"\r\n    val seccion: String = \"\"\r\n    var estudiantes: List<String> = ArrayList()\r\n    var apoderados: List<String> = ArrayList()\r\n    var docentes: List<String> = ArrayList()\r\n    val emailsApoderados: List<String> = ArrayList()\r\n\r\n    fun totalEstudiantes(): Int { return estudiantes.size }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/javierprado/jmapp/data/entities/Aula.kt b/app/src/main/java/com/javierprado/jmapp/data/entities/Aula.kt
--- a/app/src/main/java/com/javierprado/jmapp/data/entities/Aula.kt	(revision e1d537618edc5384dbfc7ebb77da1b989a5fe35c)
+++ b/app/src/main/java/com/javierprado/jmapp/data/entities/Aula.kt	(date 1713041524607)
@@ -11,7 +11,7 @@
     var estudiantes: List<String> = ArrayList()
     var apoderados: List<String> = ArrayList()
     var docentes: List<String> = ArrayList()
-    val emailsApoderados: List<String> = ArrayList()
+    val emails: List<String> = ArrayList()
 
     fun totalEstudiantes(): Int { return estudiantes.size }
 }
\ No newline at end of file
Index: app/src/main/java/com/javierprado/jmapp/data/retrofit/ColegioAPI.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.javierprado.jmapp.data.retrofit\r\n\r\nimport com.javierprado.jmapp.data.entities.Apoderado\r\nimport com.javierprado.jmapp.data.entities.Asistencia\r\nimport com.javierprado.jmapp.data.entities.Aula\r\nimport com.javierprado.jmapp.data.entities.Calificacion\r\nimport com.javierprado.jmapp.data.entities.Curso\r\nimport com.javierprado.jmapp.data.entities.Docente\r\nimport com.javierprado.jmapp.data.entities.Estudiante\r\nimport com.javierprado.jmapp.data.entities.Horario\r\nimport com.javierprado.jmapp.data.entities.Justificacion\r\nimport com.javierprado.jmapp.data.entities.Noticia\r\nimport com.javierprado.jmapp.data.entities.Reunion\r\nimport com.javierprado.jmapp.data.entities.Tarea\r\nimport com.javierprado.jmapp.data.entities.Usuario\r\nimport retrofit2.Call\r\nimport retrofit2.http.Body\r\nimport retrofit2.http.DELETE\r\nimport retrofit2.http.GET\r\nimport retrofit2.http.POST\r\nimport retrofit2.http.PUT\r\nimport retrofit2.http.Query\r\nimport retrofit2.http.Path;\r\n\r\ninterface ColegioAPI {\r\n    // USUARIOS\r\n    @POST(\"/api/auth/login\") // INICIAR SESION\r\n    fun login(@Body usuario : Usuario, @Query(\"rol\") rol : String): Call<Usuario>\r\n    @PUT(\"/api/auth/contrasena\") // ACTUALIZAR CONTRASEÃ‘A DE USUARIO\r\n    fun actualizarContrasena(@Body usuario : Usuario): Call<Void>//QUITAR\r\n    @GET(\"/api/auth/session\") // COMPROBAR SESION\r\n    fun obtenerSesion(@Query(\"rol\") rol : String): Call<Usuario>\r\n    @GET(\"/api/auth/email\") // COMPROBAR CORREO\r\n    fun existeCorreo(@Query(\"correo\") correo : String): Call<Void>\r\n\r\n    // NOTICIAS\r\n    @GET(\"/api/noticias\") // OBTENER NOTICIAS\r\n    fun listarNoticias(): Call<List<Noticia>>\r\n    @GET(\"/api/noticias/{id}\") // OBTENER NOTICIA POR ID\r\n    fun obtenerNoticia(@Path(\"id\")  noticiaId: String): Call<Noticia>\r\n    @POST(\"/api/noticias\") // AGREGAR NOTICIA\r\n    fun agregarNoticia(@Body noticia : Noticia) : Call<Void>\r\n    @PUT(\"/api/noticias/{id}\") // EDITAR NOTICIA\r\n    fun editarNoticia(@Body noticia : Noticia, @Path(\"id\")  noticiaId: String) : Call<Void>\r\n    @DELETE(\"/api/noticias/{id}\") // ELIMINAR NOTICIA\r\n    fun eliminarNoticia(@Path(\"id\")  noticiaId: String): Call<Void>\r\n\r\n    // HORARIOS\r\n    @POST(\"/api/horarios\") // OBTENER HORARIOS\r\n    fun listarHorarios(@Query(\"grado\") grado : Int, @Query(\"nivel\") nivel : String, @Query(\"seccion\") seccion : String, @Query(\"fecha\") fechaClase : String): Call<List<List<Horario>>>\r\n    @GET(\"/api/horarios/{id}\") // BUSCAR POR ID\r\n    fun buscarHorario(@Path(\"id\")  horarioId: String): Call<Horario>\r\n    @PUT(\"/api/horarios\") // ACTUALIZAR POR ID\r\n    fun editarHorario(@Body horario: Horario, @Path(\"id\")  horarioId: String): Call<Void>\r\n\r\n    // ESTUDIANTES - AULA\r\n    @GET(\"/api/estudiantes/aulas\") // OBTENER AULAS\r\n    fun obtenerAulas(@Query(\"docente\") docenteId : String?, @Query(\"grado\") grado : Int?, @Query(\"nivel\") nivel : String?, @Query(\"seccion\") seccion : String?): Call<List<Aula>>\r\n    @POST(\"/api/estudiantes\") // LISTAR\r\n    fun listarEstudiantes(@Query(\"apoderado\") apoderadoId : String, @Body estudiantes: List<String>): Call<List<Estudiante>>\r\n    @GET(\"/api/estudiantes/{id}\") // OBTENER ESTUDIANTES\r\n    fun buscarEstudiante(@Path(\"id\")  estudianteId: String?, @Query(\"dni\") dni : Int?): Call<Estudiante>\r\n\r\n    // CURSOS\r\n    @GET(\"/api/cursos\") // OBTENER CURSOS\r\n    fun listarCursos(@Query(\"estudiante\") estudianteId : String?, @Query(\"nivel\") nivel : String?): Call<List<Curso>>\r\n    @GET(\"/api/cursos/{id}\") // OBTENER CURSO\r\n    fun obtenerCurso(@Query(\"id\") cursoId : String?): Call<Curso>\r\n\r\n    // ASISTENCIAS\r\n    @POST(\"/api/asistencias\") // OBTENER ASISTENCIAS\r\n    fun listarAsistencias(@Body estudiantes: List<String>, @Query(\"fecha\") fecha : String,\r\n                          @Query(\"curso\") cursoId: String, @Query(\"docente\") docenteId: String): Call<List<Asistencia>>\r\n    fun editarAsistencias(@Body asistencias: List<Asistencia>): Call<List<String>>\r\n\r\n    //CALIFICACIONES\r\n    @POST(\"/api/calificaciones\")\r\n    fun listarCalificaciones(@Query(\"estudiante\") estudianteId: String, @Query(\"curso\") cursoId: String): Call<Calificacion>\r\n    @PUT(\"/api/calificaciones/{id}\")\r\n    fun editarCalificaciones(@Body calificacion: Calificacion, @Path(\"id\") calificacionId: String?): Call<Void>\r\n\r\n    //TAREAS\r\n    @GET(\"/api/tareas\") // LISTAR\r\n    fun listarTareas(@Query(\"aula\") aulaId: String, @Query(\"docente\") docenteId: String): Call<List<Tarea>>\r\n    @POST(\"/api/tareas/{id}\") // BUSCAR\r\n    fun buscarTarea(@Path(\"id\") tareaId: String): Call<Tarea>\r\n    @POST(\"/api/tareas\") // AGREGAR\r\n    fun agregarTarea(@Body tarea : Tarea) : Call<Void>\r\n\r\n    // DOCENTES\r\n    @GET(\"/api/docentes\") // LISTAR\r\n    fun listarDocentes(@Query(\"curso\") cursoId : String, @Query(\"estudiante\") estudianteId : String, @Query(\"aula\") aulaId: String): Call<List<Docente>>\r\n    @POST(\"/api/docentes/{id}\") // BUSCAR\r\n    fun buscarDocente(@Path(\"id\") docenteId: String): Call<Docente>\r\n    @POST(\"/api/docentes/{id}\") // REGISTRO y ACTUALIZACION\r\n    fun guardarDocente(@Body docente: Docente, @Path(\"id\") docenteId: String?): Call<Void>\r\n    //    @PUT(\"/api/docentes\")\r\n    //    fun actualizarInfoDocente(@Body docente: Docente): Call<Void> // TAMBIEN ACTUALIZA INFO DE CUENTA\r\n\r\n    //APODERADOS\r\n    @GET(\"/api/apoderados\") // LISTAR\r\n    fun listarApoderados(@Query(\"estudiante\") estudianteId: String): Call<List<Apoderado>>\r\n    @GET(\"/api/apoderados/{id}\") // BUSCAR\r\n    fun buscarApoderado(@Path(\"id\") apoderadoId: String): Call<Apoderado>\r\n    @POST(\"/api/apoderados/reunion\") // BUSCAR\r\n    fun buscarApoderadoReunion(@Body reunion: Reunion): Call<Apoderado>\r\n    @POST(\"/api/apoderados/{id}\") // REGISTRO Y ACTUALIZACION\r\n    fun guardarApoderado(@Body apoderado : Apoderado, @Path(\"id\") apoderadoId: String?): Call<Void>\r\n//    @PUT(\"/api/apoderados\")\r\n//    fun actualizarInfoApoderado(@Body apoderado : Apoderado): Call<Void> // TAMBIEN ACTUALIZA INFO DE CUENTA\r\n\r\n    //REUNIONES\r\n    @POST(\"/api/reuniones\") // LISTAR\r\n    fun listarReuniones(@Query(\"docente\") docenteId: String, @Body reuniones: List<String>): Call<List<Reunion>>\r\n    @GET(\"/api/reuniones/{id}\") // BUSCAR\r\n    fun buscarReunion(@Path(\"id\") id: String): Call<Reunion>\r\n    @POST(\"/api/reuniones/{id}\") // GUARDAR - EDITAR\r\n    fun guardarReunion(@Body reunion: Reunion, @Path(\"id\") id: String): Call<Void>\r\n    @DELETE(\"/api/reuniones/{id}\") // ELIMINAR\r\n    fun eliminarReunion(@Path(\"id\") id: String): Call<Void>\r\n\r\n    //JUSTIFICACIONES\r\n    @GET(\"/api/justificaciones\") // LISTAR\r\n    fun listarJustificaciones(@Query(\"estudiante\") estudianteId: String): Call<List<Reunion>>\r\n    @GET(\"/api/justificaciones/{id}\") // BUSCAR\r\n    fun buscarJustificacion(@Path(\"id\") id: String): Call<Reunion>\r\n    @POST(\"/api/justificaciones/{id}\") // GUARDAR - EDITAR\r\n    fun guardarJustificacion(@Body justificacion: Justificacion, @Path(\"id\") id: String): Call<Void>\r\n    @DELETE(\"/api/justificaciones/{id}\") // ELIMINAR\r\n    fun eliminarJustificacion(@Path(\"id\") id: String): Call<Void>\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/javierprado/jmapp/data/retrofit/ColegioAPI.kt b/app/src/main/java/com/javierprado/jmapp/data/retrofit/ColegioAPI.kt
--- a/app/src/main/java/com/javierprado/jmapp/data/retrofit/ColegioAPI.kt	(revision e1d537618edc5384dbfc7ebb77da1b989a5fe35c)
+++ b/app/src/main/java/com/javierprado/jmapp/data/retrofit/ColegioAPI.kt	(date 1713040053153)
@@ -90,7 +90,7 @@
     // DOCENTES
     @GET("/api/docentes") // LISTAR
     fun listarDocentes(@Query("curso") cursoId : String, @Query("estudiante") estudianteId : String, @Query("aula") aulaId: String): Call<List<Docente>>
-    @POST("/api/docentes/{id}") // BUSCAR
+    @GET("/api/docentes/{id}") // BUSCAR
     fun buscarDocente(@Path("id") docenteId: String): Call<Docente>
     @POST("/api/docentes/{id}") // REGISTRO y ACTUALIZACION
     fun guardarDocente(@Body docente: Docente, @Path("id") docenteId: String?): Call<Void>
Index: app/src/main/java/com/javierprado/jmapp/view/fragments/SeleccionarUsuarioFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@file:Suppress(\"DEPRECATION\")\r\n\r\npackage com.javierprado.jmapp.view.fragments\r\n\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.appcompat.widget.Toolbar\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.findNavController\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.javierprado.jmapp.R\r\nimport com.javierprado.jmapp.data.util.AnotherUtil\r\nimport com.javierprado.jmapp.view.adapters.*\r\nimport com.javierprado.jmapp.modal.RecentChats\r\nimport com.javierprado.jmapp.modal.Users\r\nimport com.javierprado.jmapp.mvvm.ChatAppViewModel\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.javierprado.jmapp.data.entities.Apoderado\r\nimport com.javierprado.jmapp.data.entities.Aula\r\nimport com.javierprado.jmapp.data.entities.Docente\r\nimport com.javierprado.jmapp.data.entities.Estudiante\r\nimport com.javierprado.jmapp.data.retrofit.RetrofitHelper\r\nimport com.javierprado.jmapp.data.util.RoleType\r\nimport com.javierprado.jmapp.databinding.FragmentSeleccionarUsuarioBinding\r\nimport com.javierprado.jmapp.view.clicks.AulaClick\r\nimport de.hdodenhof.circleimageview.CircleImageView\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass SeleccionarUsuarioFragment : Fragment(), OnItemClickListener, onChatClicked {\r\n    lateinit var rvUsers : RecyclerView\r\n    lateinit var rvSeleccionarUsuarios : RecyclerView\r\n    lateinit var rvRecentChats : RecyclerView\r\n    lateinit var adapter : UserAdapter\r\n    lateinit var aulaAdapter : AulaAdapter\r\n    lateinit var hijoAdapter : HijoApoderadoAdapter\r\n    lateinit var viewModel : ChatAppViewModel\r\n    lateinit var toolbar: Toolbar\r\n    lateinit var circleImageView: CircleImageView\r\n    lateinit var recentadapter : RecentChatAdapter\r\n    lateinit var auth: FirebaseAuth\r\n    lateinit var firestore : FirebaseFirestore\r\n    lateinit var binding: FragmentSeleccionarUsuarioBinding\r\n\r\n    private lateinit var msg : String\r\n    var aulas: Collection<Aula> = ArrayList()\r\n\r\n    private var token = \"\"\r\n    var usuarioId: String = \"\"\r\n    private val retro = RetrofitHelper.getInstanceStatic()\r\n    override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? ): View {\r\n        // Inflate the layout for this fragment\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_seleccionar_usuario, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        viewModel = ViewModelProvider(this).get(ChatAppViewModel::class.java)\r\n        toolbar = view.findViewById(R.id.toolbarMain)\r\n//        val logoutimage = toolbar.findViewById<ImageView>(R.id.logOut)\r\n//        circleImageView = toolbar.findViewById(R.id.tlImage)\r\n        binding.lifecycleOwner = viewLifecycleOwner\r\n//        viewModel.imageUrl.observe(viewLifecycleOwner, Observer {\r\n//            Glide.with(requireContext()).load(it).into(circleImageView)\r\n//        })\r\n//        requireActivity().onBackPressedDispatcher.addCallback(viewLifecycleOwner,\r\n//            object : OnBackPressedCallback(true) {\r\n//                override fun handleOnBackPressed() {\r\n//                    getActivity()?.moveTaskToBack(true);\r\n//                    getActivity()?.finish();\r\n//                }\r\n//            })\r\n        auth = FirebaseAuth.getInstance()\r\n        firestore = FirebaseFirestore.getInstance()\r\n\r\n        rvUsers = view.findViewById(R.id.rvUsers)\r\n        rvSeleccionarUsuarios = view.findViewById(R.id.rvSeleccionarUsuarios)\r\n        rvRecentChats = view.findViewById(R.id.rvRecentChats)\r\n        adapter = UserAdapter()\r\n        recentadapter = RecentChatAdapter()\r\n        hijoAdapter = HijoApoderadoAdapter()\r\n\r\n        val layoutManager = LinearLayoutManager(activity, LinearLayoutManager.HORIZONTAL, false)\r\n        val layoutManager2 = LinearLayoutManager(activity, LinearLayoutManager.HORIZONTAL, false)\r\n        val layoutManager3 = LinearLayoutManager(activity)\r\n\r\n        rvUsers.layoutManager = layoutManager\r\n        rvSeleccionarUsuarios.layoutManager = layoutManager2\r\n        rvRecentChats.layoutManager= layoutManager3\r\n\r\n        val api = retro.getApi()\r\n        aulaAdapter = AulaAdapter(ArrayList(), object : AulaClick {\r\n            override fun onAulaClicker(aula: Aula?) {\r\n                val emailsApoderados = aula!!.emailsApoderados\r\n                if(emailsApoderados.isNotEmpty()){\r\n                    viewModel.getUsers(emailsApoderados).observe(viewLifecycleOwner) {\r\n                        adapter.setList(it)\r\n                        rvUsers.adapter = adapter\r\n                        rvSeleccionarUsuarios.visibility = View.GONE\r\n                        rvUsers.visibility = View.VISIBLE\r\n                    }\r\n                }else{\r\n                    Toast.makeText(activity, \"No hay docentes.\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        })\r\n        hijoAdapter = HijoApoderadoAdapter(ArrayList(), object : onEstudianteApoClickListener {\r\n            override fun onHijoSelected(hijo: Estudiante) {\r\n                api.listarDocentes(\"null\", hijo.id, \"null\").enqueue(object : Callback<List<Docente>> {\r\n                    override fun onResponse(call: Call<List<Docente>>, response: Response<List<Docente>>) {\r\n                        msg = response.headers()[\"message\"] ?: \"\"\r\n                        if (response.isSuccessful) {\r\n                            val emailsDocentes = response.body()!!.map { d-> d.correo }\r\n                            viewModel.getUsers(emailsDocentes).observe(viewLifecycleOwner) {\r\n                                adapter.setList(it)\r\n                                rvUsers.adapter = adapter\r\n                                rvSeleccionarUsuarios.visibility = View.GONE\r\n                                rvUsers.visibility = View.VISIBLE\r\n                            }\r\n                        }else{\r\n                            Log.e(\"NR:\", msg)\r\n                            Toast.makeText(activity, msg, Toast.LENGTH_SHORT).show()\r\n                        }\r\n                    }\r\n                    override fun onFailure(call: Call<List<Docente>>, t: Throwable) {\r\n                        Log.e(\"OBTENER DOCENTES\", t.message.toString())\r\n                    }\r\n                } )\r\n            }\r\n        })\r\n        firestore.collection(\"Users\").document(AnotherUtil.getUidLoggedIn()).addSnapshotListener{ value, error ->\r\n            if (value != null && value.exists()) {\r\n                val user = value.toObject(Users::class.java)\r\n                usuarioId = user!!.tipoid!!\r\n                token = user.token!!\r\n                retro.setBearerToken(token)\r\n                if(user.tipo!! == RoleType.DOC.name){\r\n                    rvSeleccionarUsuarios.adapter = aulaAdapter\r\n                    api.obtenerAulas(usuarioId, null, null, null).enqueue(object : Callback<List<Aula>> {\r\n                        override fun onResponse(call: Call<List<Aula>>, response: Response<List<Aula>>) {\r\n                            msg = response.headers()[\"message\"] ?: \"\"\r\n                            if (response.isSuccessful) {\r\n                                aulas = response.body()!!\r\n                                aulaAdapter.setAulas(aulas as MutableList)\r\n                            }else{\r\n                                Log.e(\"OBTENER AULAS:\", msg)\r\n                                Toast.makeText(activity, msg, Toast.LENGTH_SHORT).show()\r\n                            }\r\n                        }\r\n                        override fun onFailure(call: Call<List<Aula>>, t: Throwable) {\r\n                            msg = \"Error en la API: ${t.message}\"\r\n                            Toast.makeText(activity, msg, Toast.LENGTH_SHORT).show()\r\n                            Log.e(\"OBTENER AULAS\", t.message.toString())\r\n                        }\r\n                    } )\r\n                }else{\r\n                    rvSeleccionarUsuarios.adapter = hijoAdapter\r\n                    api.listarEstudiantes(usuarioId, ArrayList()).enqueue(object : Callback<List<Estudiante>> {\r\n                        override fun onResponse(call: Call<List<Estudiante>>, response: Response<List<Estudiante>>) {\r\n                            if (response.isSuccessful) {\r\n                                val estudiantes = response.body()!!\r\n                                hijoAdapter.setEstudiantes(estudiantes)\r\n                            }else{\r\n                                msg = \"FAIL $msg\"\r\n                                Log.e(\"NR :\", msg)\r\n                            }\r\n                        }\r\n                        override fun onFailure(call: Call<List<Estudiante>>, t: Throwable) {\r\n                            Log.e(\"OBTENER APODERADOS\", t.message.toString())\r\n                        }\r\n                    } )\r\n                }\r\n            }\r\n        }\r\n        adapter.setOnClickListener(this)\r\n        viewModel.getRecentUsers().observe(viewLifecycleOwner, Observer {\r\n            recentadapter.setList(it)\r\n            rvRecentChats.adapter = recentadapter\r\n        })\r\n        recentadapter.setOnChatClickListener(this)\r\n\r\n//        circleImageView.setOnClickListener {\r\n//            view.findNavController().navigate(R.id.action_homeFragment_to_settingFragment)\r\n//        }\r\n\r\n    }\r\n    //?\r\n    @Deprecated(\"Deprecated in Java\", ReplaceWith(\r\n        \"super.onActivityCreated(savedInstanceState)\",\r\n        \"androidx.fragment.app.Fragment\"\r\n    ))\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n    }\r\n    override fun onUserSelected(position: Int, users: Users) {\r\n        val action = SeleccionarUsuarioFragmentDirections.actionSeleccionarUsuarioFragmentToChatFragment(users)\r\n        view?.findNavController()?.navigate(action)\r\n    }\r\n    override fun getOnChatCLickedItem(position: Int, chatList: RecentChats) {\r\n        val action = SeleccionarUsuarioFragmentDirections.actionSeleccionarUsuarioFragmentToChatfromHome(chatList)\r\n        view?.findNavController()?.navigate(action)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/javierprado/jmapp/view/fragments/SeleccionarUsuarioFragment.kt b/app/src/main/java/com/javierprado/jmapp/view/fragments/SeleccionarUsuarioFragment.kt
--- a/app/src/main/java/com/javierprado/jmapp/view/fragments/SeleccionarUsuarioFragment.kt	(revision e1d537618edc5384dbfc7ebb77da1b989a5fe35c)
+++ b/app/src/main/java/com/javierprado/jmapp/view/fragments/SeleccionarUsuarioFragment.kt	(date 1713043414754)
@@ -53,7 +53,9 @@
     lateinit var binding: FragmentSeleccionarUsuarioBinding
 
     private lateinit var msg : String
-    var aulas: Collection<Aula> = ArrayList()
+    var aulas: List<Aula> = ArrayList()
+
+    var estudiantes: List<Estudiante> = ArrayList()
 
     private var token = ""
     var usuarioId: String = ""
@@ -103,7 +105,7 @@
         val api = retro.getApi()
         aulaAdapter = AulaAdapter(ArrayList(), object : AulaClick {
             override fun onAulaClicker(aula: Aula?) {
-                val emailsApoderados = aula!!.emailsApoderados
+                val emailsApoderados = aula!!.emails
                 if(emailsApoderados.isNotEmpty()){
                     viewModel.getUsers(emailsApoderados).observe(viewLifecycleOwner) {
                         adapter.setList(it)
@@ -153,7 +155,7 @@
                             msg = response.headers()["message"] ?: ""
                             if (response.isSuccessful) {
                                 aulas = response.body()!!
-                                aulaAdapter.setAulas(aulas as MutableList)
+                                aulaAdapter.setAulas(aulas)
                             }else{
                                 Log.e("OBTENER AULAS:", msg)
                                 Toast.makeText(activity, msg, Toast.LENGTH_SHORT).show()
@@ -169,10 +171,12 @@
                     rvSeleccionarUsuarios.adapter = hijoAdapter
                     api.listarEstudiantes(usuarioId, ArrayList()).enqueue(object : Callback<List<Estudiante>> {
                         override fun onResponse(call: Call<List<Estudiante>>, response: Response<List<Estudiante>>) {
+                            msg = response.headers()["message"] ?: ""
                             if (response.isSuccessful) {
-                                val estudiantes = response.body()!!
+                                 estudiantes = response.body()!!
                                 hijoAdapter.setEstudiantes(estudiantes)
                             }else{
+                                Toast.makeText(activity, msg, Toast.LENGTH_SHORT).show()
                                 msg = "FAIL $msg"
                                 Log.e("NR :", msg)
                             }
Index: app/src/main/java/com/javierprado/jmapp/view/activities/menus/MenuAdministradorActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.javierprado.jmapp.view.activities.menus\r\n\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.widget.ImageView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.javierprado.jmapp.R\r\nimport com.javierprado.jmapp.view.adapters.NoticiaAdapter\r\nimport com.javierprado.jmapp.data.retrofit.ColegioAPI\r\nimport com.javierprado.jmapp.data.retrofit.RetrofitHelper\r\nimport com.javierprado.jmapp.data.util.ExtraFunctions\r\nimport com.javierprado.jmapp.data.util.RoleType\r\nimport com.javierprado.jmapp.view.NotiEventosEsco\r\nimport com.javierprado.jmapp.view.activities.agregar.RegisterApoderadoActivity\r\nimport com.javierprado.jmapp.view.activities.agregar.RegisterDocenteActivity\r\nimport com.javierprado.jmapp.view.activities.control.ControlHorarioActivity\r\nimport com.javierprado.jmapp.view.activities.control.ControlNoticiaActivity\r\nimport com.javierprado.jmapp.view.login.OptionLogin\r\n\r\nclass MenuAdministradorActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {\r\n\r\n    private lateinit var drawer: DrawerLayout\r\n    private lateinit var toogle: ActionBarDrawerToggle\r\n\r\n    private lateinit var recyclerView: RecyclerView\r\n    private lateinit var btnMasRecientes: ImageView\r\n\r\n    private lateinit var auth: FirebaseAuth\r\n    private lateinit var api : ColegioAPI\r\n\r\n    val TOKEN = \"token\"; val USUARIOID = \"usuarioid\"\r\n    var tokenAdmin = \"\"; var adminId = \"\"\r\n\r\n    private var extraFuns : ExtraFunctions = ExtraFunctions()\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_menu_administrador)\r\n\r\n        btnMasRecientes = findViewById(R.id.btn_mas_reciente)\r\n        //API Y BUNDLE\r\n        val retro = RetrofitHelper.getInstanceStatic()\r\n        val bundle = intent.extras\r\n        if (bundle != null) {\r\n            tokenAdmin=bundle.getString(TOKEN, \"\")\r\n            adminId=bundle.getString(USUARIOID, \"\")\r\n            retro.setBearerToken(tokenAdmin)\r\n        }\r\n        api = retro.getApi()\r\n        //Noticias\r\n        recyclerView = findViewById(R.id.recyclerViewNews)\r\n        recyclerView.layoutManager = LinearLayoutManager(this)\r\n\r\n        actualizarNoticias(retro.getBearerToken())\r\n        btnMasRecientes.setOnClickListener { actualizarNoticias(retro.getBearerToken()) }\r\n\r\n        auth = FirebaseAuth.getInstance()\r\n\r\n\r\n        val toolbar: androidx.appcompat.widget.Toolbar = findViewById(R.id.toolbar_main)\r\n        setSupportActionBar(toolbar)\r\n\r\n        drawer = findViewById(R.id.drawer_layout)\r\n\r\n        toogle = ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close)\r\n\r\n        drawer.addDrawerListener(toogle)\r\n\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n        supportActionBar?.setHomeButtonEnabled(true)\r\n\r\n        val navigationView: NavigationView = findViewById(R.id.nav_view_administrador)\r\n        navigationView.setNavigationItemSelectedListener(this)\r\n    }\r\n\r\n    override fun onNavigationItemSelected(item: MenuItem): Boolean {\r\n        when(item.itemId){\r\n            R.id.nav_item_1 -> Toast.makeText(this, \"Inicio\", Toast.LENGTH_SHORT).show()\r\n            R.id.nav_item_2 -> {\r\n                val intent = Intent(this, RegisterApoderadoActivity::class.java)\r\n                intent.putExtra(USUARIOID, adminId)\r\n                intent.putExtra(RegisterApoderadoActivity().TOKEN, tokenAdmin)\r\n                startActivity(intent)\r\n            }\r\n            R.id.nav_item_3 -> {\r\n                val intent = Intent(this, RegisterDocenteActivity::class.java)\r\n                intent.putExtra(USUARIOID, adminId)\r\n                intent.putExtra(RegisterDocenteActivity().TOKEN, tokenAdmin)\r\n                startActivity(intent)\r\n            }\r\n            R.id.nav_item_4 -> {\r\n                Toast.makeText(this, \"Redactar y Enviar Notificaciones\", Toast.LENGTH_SHORT).show()\r\n                val intent = Intent(this, NotiEventosEsco::class.java)\r\n                intent.putExtra(USUARIOID, adminId)\r\n                startActivity(intent)\r\n            }\r\n            R.id.nav_item_5 -> {\r\n                Toast.makeText(this, \"Editar Horario Escolar\", Toast.LENGTH_SHORT).show()\r\n                val intent = Intent(this, ControlHorarioActivity::class.java)\r\n                intent.putExtra(MenuAdministradorActivity().USUARIOID, adminId)\r\n                intent.putExtra(MenuAdministradorActivity().TOKEN, tokenAdmin)\r\n                intent.putExtra(ControlHorarioActivity().ROLE, RoleType.ADMIN.name)\r\n                startActivity(intent)\r\n            }\r\n            R.id.nav_item_6 -> {\r\n                val intent = Intent(this, ControlNoticiaActivity::class.java)\r\n                intent.putExtra(USUARIOID, adminId)\r\n                intent.putExtra(MenuAdministradorActivity().TOKEN, tokenAdmin)\r\n                startActivity(intent)\r\n                Toast.makeText(this, \"Agregar Noticia\", Toast.LENGTH_SHORT).show()\r\n            }\r\n            R.id.nav_item_7 -> Toast.makeText(this, \"Docentes Registrados\", Toast.LENGTH_SHORT).show()\r\n            R.id.nav_item_8 ->  {\r\n                auth.signOut()\r\n                val intent = Intent(this, OptionLogin::class.java)\r\n                intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP\r\n                startActivity(intent)\r\n            }\r\n        }\r\n\r\n        drawer.closeDrawer(GravityCompat.START)\r\n        return true\r\n    }\r\n\r\n    //Iconos del Toolbar\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.perfil_noti_main, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return when (item.itemId) {\r\n            R.id.action_perfil -> {\r\n\r\n                true\r\n            }\r\n            R.id.action_notificaciones -> {\r\n\r\n                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }\r\n    fun actualizarNoticias(token: String){\r\n        val adapter = NoticiaAdapter(this@MenuAdministradorActivity, ArrayList(), api, token, false)\r\n        adapter.setAdminId(adminId)\r\n        extraFuns.listarNoticias(api, adapter, this@MenuAdministradorActivity)\r\n        recyclerView.adapter = adapter\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/javierprado/jmapp/view/activities/menus/MenuAdministradorActivity.kt b/app/src/main/java/com/javierprado/jmapp/view/activities/menus/MenuAdministradorActivity.kt
--- a/app/src/main/java/com/javierprado/jmapp/view/activities/menus/MenuAdministradorActivity.kt	(revision e1d537618edc5384dbfc7ebb77da1b989a5fe35c)
+++ b/app/src/main/java/com/javierprado/jmapp/view/activities/menus/MenuAdministradorActivity.kt	(date 1713017298517)
@@ -26,6 +26,8 @@
 import com.javierprado.jmapp.view.activities.agregar.RegisterDocenteActivity
 import com.javierprado.jmapp.view.activities.control.ControlHorarioActivity
 import com.javierprado.jmapp.view.activities.control.ControlNoticiaActivity
+import com.javierprado.jmapp.view.activities.notificaciones.RegistroDeNotificacionActivity
+import com.javierprado.jmapp.view.fragments.RegistroDeNotificacionFragment
 import com.javierprado.jmapp.view.login.OptionLogin
 
 class MenuAdministradorActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {
@@ -100,7 +102,7 @@
             }
             R.id.nav_item_4 -> {
                 Toast.makeText(this, "Redactar y Enviar Notificaciones", Toast.LENGTH_SHORT).show()
-                val intent = Intent(this, NotiEventosEsco::class.java)
+                val intent = Intent(this, RegistroDeNotificacionActivity::class.java)
                 intent.putExtra(USUARIOID, adminId)
                 startActivity(intent)
             }
Index: app/src/main/java/com/javierprado/jmapp/view/login/OptionLogin.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.javierprado.jmapp.view.login\r\n\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.LinearLayout\r\nimport com.javierprado.jmapp.R\r\n\r\nclass OptionLogin : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_option_login)\r\n\r\n        // Obteniendo referencias a los layouts de Administrador, Apoderado y Docente\r\n        val lyAdmin = findViewById<LinearLayout>(R.id.lyAdmin)\r\n        val lyApoderado = findViewById<LinearLayout>(R.id.lyApoderado)\r\n        val lyDocente = findViewById<LinearLayout>(R.id.lyDocente)\r\n\r\n        // Agregando listeners de clics a los layouts\r\n        lyAdmin.setOnClickListener {\r\n            // Abrir la actividad de login para el Administrador\r\n            val intent = Intent(this@OptionLogin, LoginAdmin::class.java)\r\n            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP\r\n            startActivity(intent)\r\n        }\r\n\r\n        lyApoderado.setOnClickListener {\r\n            // Abrir la actividad de login para el Apoderado\r\n            val intent = Intent(this@OptionLogin, LoginActivity::class.java)\r\n            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP\r\n            startActivity(intent)\r\n        }\r\n\r\n        lyDocente.setOnClickListener {\r\n            // Abrir la actividad de login para el Docente\r\n            val intent = Intent(this@OptionLogin, LoginDocente::class.java)\r\n            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/javierprado/jmapp/view/login/OptionLogin.kt b/app/src/main/java/com/javierprado/jmapp/view/login/OptionLogin.kt
--- a/app/src/main/java/com/javierprado/jmapp/view/login/OptionLogin.kt	(revision e1d537618edc5384dbfc7ebb77da1b989a5fe35c)
+++ b/app/src/main/java/com/javierprado/jmapp/view/login/OptionLogin.kt	(date 1713037082904)
@@ -6,6 +6,7 @@
 import android.view.View
 import android.widget.LinearLayout
 import com.javierprado.jmapp.R
+import com.javierprado.jmapp.view.activities.menus.MenuAdministradorActivity
 
 class OptionLogin : AppCompatActivity() {
     override fun onCreate(savedInstanceState: Bundle?) {
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"#JAVA_HOME\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveExternalAnnotations\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision e1d537618edc5384dbfc7ebb77da1b989a5fe35c)
+++ b/.idea/gradle.xml	(date 1713017397695)
@@ -5,7 +5,7 @@
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
-        <option name="gradleJvm" value="#JAVA_HOME" />
+        <option name="gradleJvm" value="jbr-17" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" default=\"true\" project-jdk-name=\"corretto-17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n  <component name=\"SuppressKotlinCodeStyleNotification\">\r\n    <option name=\"disableForAll\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision e1d537618edc5384dbfc7ebb77da1b989a5fe35c)
+++ b/.idea/misc.xml	(date 1713017522412)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="corretto-17" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <uses-permission android:name=\"android.permission.POST_NOTIFICATIONS\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.KILL_BACKGROUND_PROCESSES\" />\r\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\r\n    <uses-permission android:name=\"com.google.android.c2dm.permission.RECEIVE\" />\r\n    <uses-permission\r\n        android:name=\"android.permission.READ_EXTERNAL_STORAGE\"\r\n        android:maxSdkVersion=\"32\" />\r\n\r\n    <application\r\n        android:name=\".view.activities.MyApplication\"\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.JMAPP\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:targetApi=\"31\">\r\n        <activity\r\n            android:name=\".view.activities.control.ControlEstudianteActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".view.activities.comunicacion.ChatApoderadoDocenteActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.activities.comunicacion.ChatDocenteApoderadoActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.activities.control.ControlSeleccionActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.activities.editar.ActualizarInfoApoderadoActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.activities.control.ControlHorarioActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.activities.control.ControlNoticiaActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.activities.agregar.RegisterDocenteActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.activities.agregar.RegisterApoderadoActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.activity_noticias\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.login.LoginAdmin\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.login.LoginDocente\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.login.LoginActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.activities.menus.MenuAdministradorActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.NotiEventosEsco\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.activities.menus.MenuDocenteActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.activities.menus.MenuApoderadoActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.Seleccion_Sesion_Activity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.MensajeDocente\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.login.OptionLogin\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.activities.editar.ResetPasswordActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.MenuPrincipalApoderadoActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".view.MainActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n\r\n        <service\r\n            android:name=\".notificaciones.FirebaseService\"\r\n            android:enabled=\"true\"\r\n            android:exported=\"false\"\r\n            android:permission=\"com.google.android.c2dm.permission.SEND\">\r\n            <intent-filter>\r\n                <action android:name=\"com.google.firebase.MESSAGING_EVENT\" />\r\n                <action android:name=\"com.google.android.c2dm.intent.RECEIVE\" />\r\n            </intent-filter>\r\n        </service>\r\n\r\n        <receiver android:name=\".notificaciones.NotificationReply\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision e1d537618edc5384dbfc7ebb77da1b989a5fe35c)
+++ b/app/src/main/AndroidManifest.xml	(date 1713017298702)
@@ -23,6 +23,8 @@
         android:theme="@style/Theme.JMAPP"
         android:usesCleartextTraffic="true"
         tools:targetApi="31">
+        <activity android:name=".view.activities.notificaciones.RegistroDeNotificacionActivity"
+            android:exported="true"/>
         <activity
             android:name=".view.activities.control.ControlEstudianteActivity"
             android:exported="false" />
Index: app/src/main/java/com/javierprado/jmapp/view/activities/notificaciones/RegistroDeNotificacionActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/javierprado/jmapp/view/activities/notificaciones/RegistroDeNotificacionActivity.kt b/app/src/main/java/com/javierprado/jmapp/view/activities/notificaciones/RegistroDeNotificacionActivity.kt
new file mode 100644
--- /dev/null	(date 1713017298677)
+++ b/app/src/main/java/com/javierprado/jmapp/view/activities/notificaciones/RegistroDeNotificacionActivity.kt	(date 1713017298677)
@@ -0,0 +1,20 @@
+package com.javierprado.jmapp.view.activities.notificaciones
+
+import android.os.Bundle
+import android.view.View
+import androidx.appcompat.app.AppCompatActivity
+import com.google.android.material.progressindicator.CircularProgressIndicator
+import com.javierprado.jmapp.R
+import com.javierprado.jmapp.view.fragments.RegistroDeNotificacionFragment
+
+class RegistroDeNotificacionActivity : AppCompatActivity() {
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_registro_de_notificacion)
+
+        supportFragmentManager.beginTransaction()
+            .replace(R.id.fcv_rnotificaciones_main, RegistroDeNotificacionFragment())
+            .commit()
+
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/activity_registro_de_notificacion.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_registro_de_notificacion.xml b/app/src/main/res/layout/activity_registro_de_notificacion.xml
new file mode 100644
--- /dev/null	(date 1713017298689)
+++ b/app/src/main/res/layout/activity_registro_de_notificacion.xml	(date 1713017298689)
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    app:layout_constrainedHeight="true"
+    tools:context=".view.activities.notificaciones.RegistroDeNotificacionActivity">
+
+    <androidx.appcompat.widget.Toolbar
+        android:id="@+id/tb_noti_rnotificaciones"
+        android:layout_width="match_parent"
+        android:layout_height="?android:attr/actionBarSize"
+        android:background="@color/toolbar"
+        android:elevation="24dp"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:gravity="center_vertical"
+            android:orientation="horizontal">
+
+            <ImageView
+                android:id="@+id/back"
+                android:layout_width="wrap_content"
+                android:layout_height="45dp"
+                android:paddingStart="16dp"
+                android:paddingEnd="16dp"
+                android:src="@drawable/baseline_arrow_back_24" />
+
+            <TextView
+                android:id="@+id/tv_title_control_noticia"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:fontFamily="@font/librefranklin_mediumitalic"
+                android:gravity="start|center_vertical"
+                android:paddingStart="4dp"
+                android:text="Redactar Notificaciones"
+                android:textColor="@color/white"
+                android:textSize="25sp"
+                android:textStyle="bold" />
+        </LinearLayout>
+    </androidx.appcompat.widget.Toolbar>
+
+    <androidx.fragment.app.FragmentContainerView
+        android:id="@+id/fcv_rnotificaciones_main"
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/tb_noti_rnotificaciones"/>
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_registro_de_noticiaciones.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_registro_de_noticiaciones.xml b/app/src/main/res/layout/fragment_registro_de_noticiaciones.xml
new file mode 100644
--- /dev/null	(date 1713017298634)
+++ b/app/src/main/res/layout/fragment_registro_de_noticiaciones.xml	(date 1713017298634)
@@ -0,0 +1,139 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/md_theme_dark_outline"
+    tools:context=".view.fragments.RegistroDeNotificacionFragment">
+
+    <androidx.constraintlayout.widget.Guideline
+        android:id="@+id/guideline_start"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        app:layout_constraintGuide_percent="0.1" />
+    <androidx.constraintlayout.widget.Guideline
+        android:id="@+id/guideline_end"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        app:layout_constraintGuide_percent="0.9" />
+    <androidx.cardview.widget.CardView
+        android:id="@+id/cv_nombre"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        app:cardCornerRadius="16dp"
+        app:cardElevation="34dp"
+        android:layout_marginBottom="40dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="@id/guideline_end"
+        app:layout_constraintStart_toStartOf="@id/guideline_start"
+        app:layout_constraintTop_toTopOf="parent">
+        <FrameLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent">
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:paddingHorizontal="24dp"
+                android:paddingTop="32dp"
+                android:paddingBottom="24dp"
+                android:layout_marginLeft="12dp"
+                android:layout_marginRight="12dp">
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:orientation="vertical"
+                    android:layout_marginTop="8dp"
+                    android:layout_marginBottom="8dp">
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:text="Titulo:"
+                        android:maxLines="1"
+                        android:ellipsize="end"
+                        android:textSize="20sp"
+                        android:textStyle="bold" />
+                    <EditText
+                        android:id="@+id/txt_NotiTitulo"
+                        android:layout_width="match_parent"
+                        android:layout_height="25dp"
+                        android:layout_gravity="left"
+                        app:layout_constrainedHeight="true"
+                        android:textSize="15sp"
+                        android:textStyle="bold"
+                        android:background="@color/nude"
+                        android:inputType="text" />
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:text="DescripciÃ³n:"
+                        android:maxLines="1"
+                        android:ellipsize="end"
+                        android:textSize="20sp"
+                        android:textStyle="bold" />
+                    <EditText
+                        android:id="@+id/txt_NotiDescrip"
+                        android:layout_width="match_parent"
+                        android:layout_height="25dp"
+                        android:layout_gravity="left"
+                        app:layout_constrainedHeight="true"
+                        android:textSize="15sp"
+                        android:textStyle="bold"
+                        android:background="@color/nude"
+                        android:inputType="text" />
+                </LinearLayout>
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:orientation="vertical"
+                    android:layout_marginTop="4dp"
+                    android:layout_marginBottom="8dp">
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:text="Destinatario:"
+                        android:maxLines="1"
+                        android:ellipsize="end"
+                        android:textSize="20sp"
+                        android:textStyle="bold" />
+                    <AutoCompleteTextView
+                        android:id="@+id/autoCompleteTextView"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:hint="Buscar destinatario"
+                        android:background="@color/nude"
+                        android:textSize="15sp"
+                        android:textStyle="bold"
+                        android:inputType="text" />
+
+                </LinearLayout>
+            </LinearLayout>
+            <com.google.android.material.progressindicator.CircularProgressIndicator
+                android:id="@+id/pb_nombre"
+                android:layout_gravity="center"
+                android:indeterminate="true"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"/>
+        </FrameLayout>
+    </androidx.cardview.widget.CardView>
+    <Button
+        android:id="@+id/fg_btn_funcion"
+        android:layout_width="300dp"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:textColor="@color/white"
+        android:textSize="35sp"
+        android:layout_marginVertical="15dp"
+        android:text="Enviar"
+        android:backgroundTint="@color/md_theme_light_tertiary"
+        android:padding="0dp"
+        android:fontFamily="@font/librefranklin_extrabolditalic"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/cv_nombre" />
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/javierprado/jmapp/view/fragments/RegistroDeNotificacionFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/javierprado/jmapp/view/fragments/RegistroDeNotificacionFragment.kt b/app/src/main/java/com/javierprado/jmapp/view/fragments/RegistroDeNotificacionFragment.kt
new file mode 100644
--- /dev/null	(date 1713017298614)
+++ b/app/src/main/java/com/javierprado/jmapp/view/fragments/RegistroDeNotificacionFragment.kt	(date 1713017298614)
@@ -0,0 +1,149 @@
+package com.javierprado.jmapp.view.fragments
+
+import android.os.Bundle
+import android.text.Editable
+import android.text.TextWatcher
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.ArrayAdapter
+import android.widget.AutoCompleteTextView
+import android.widget.Button
+import android.widget.EditText
+import android.widget.Toast
+import androidx.fragment.app.Fragment
+import com.google.firebase.firestore.FirebaseFirestore
+import com.javierprado.jmapp.R
+
+class RegistroDeNotificacionFragment : Fragment() {
+
+    private lateinit var botonEnviar: Button
+    private lateinit var tituloEditText: EditText
+    private lateinit var descripcionEditText: EditText
+    private lateinit var autoCompleteTextView: AutoCompleteTextView
+
+    private var destinatarioSeleccionado: String = ""
+    private var titulo: String = ""
+    private var descripcion: String = ""
+
+    override fun onCreateView(
+        inflater: LayoutInflater,
+        container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+
+        val view = inflater.inflate(R.layout.fragment_registro_de_noticiaciones, container, false)
+
+        autoCompleteTextView = view.findViewById(R.id.autoCompleteTextView)
+        botonEnviar = view.findViewById(R.id.fg_btn_funcion)
+        tituloEditText = view.findViewById(R.id.txt_NotiTitulo)
+        descripcionEditText = view.findViewById(R.id.txt_NotiDescrip)
+
+        // Agregar TextWatchers a los EditText
+        tituloEditText.addTextChangedListener(textWatcher)
+        descripcionEditText.addTextChangedListener(textWatcher)
+
+        // Deshabilitar el botÃ³n al inicio
+        botonEnviar.isEnabled = false
+
+        return view
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        // Configurar el adaptador para el AutoCompleteTextView
+        val adapter = ArrayAdapter<String>(requireContext(), android.R.layout.simple_dropdown_item_1line)
+        autoCompleteTextView.setAdapter(adapter)
+
+        // Manejar el evento de cambio de texto en el AutoCompleteTextView
+        autoCompleteTextView.addTextChangedListener(object : TextWatcher {
+            override fun afterTextChanged(s: Editable?) {
+                val nombreCompleto = s.toString()
+                if (nombreCompleto.isNotBlank()) {
+                    val nombres = nombreCompleto.split(" ")
+                    if (nombres.size >= 2) {
+                        val nombre = nombres[0]
+                        val apellido = nombres[1]
+                        buscarUsuarios(nombre, apellido)
+                    }
+                } else {
+                    // Limpiar la lista de sugerencias si el campo estÃ¡ vacÃ­o
+                    adapter.clear()
+                }
+            }
+
+            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
+
+            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
+        })
+
+        // Agregar un listener para manejar la selecciÃ³n de usuario en el AutoCompleteTextView
+        autoCompleteTextView.setOnItemClickListener { parent, _, position, _ ->
+            destinatarioSeleccionado = parent.getItemAtPosition(position) as String
+        }
+
+        // lÃ³gica del botÃ³n
+        botonEnviar.setOnClickListener {
+            titulo = tituloEditText.text.toString()
+            descripcion = descripcionEditText.text.toString()
+
+            // Verificar si los campos estÃ¡n completos
+            if (titulo.isNotEmpty() && descripcion.isNotEmpty() && destinatarioSeleccionado.isNotEmpty()) {
+                // Enviar Noti
+                enviarNotificacion(destinatarioSeleccionado, titulo, descripcion)
+            } else {
+                // Mostrar mensaje de error si falta algÃºn campo
+                Toast.makeText(requireContext(), "Por favor completa todos los campos", Toast.LENGTH_SHORT).show()
+            }
+        }
+    }
+
+    private fun buscarUsuarios(nombre: String, apellido: String) {
+        val db = FirebaseFirestore.getInstance()
+        val usuariosRef = db.collection("usuarios")
+
+        // Realizar la consulta en Firestore
+        usuariosRef.whereEqualTo("nombres", nombre)
+            .whereEqualTo("apellidos", apellido)
+            .get()
+            .addOnSuccessListener { result ->
+                val usuarios = mutableListOf<String>()
+                for (document in result) {
+                    val nombreCompleto = "${document.getString("nombres")} ${document.getString("apellidos")}"
+                    usuarios.add(nombreCompleto)
+                }
+                // Actualizar el adaptador con los resultados de la bÃºsqueda
+                val adapter = ArrayAdapter(requireContext(), android.R.layout.simple_dropdown_item_1line, usuarios)
+                autoCompleteTextView.setAdapter(adapter)
+            }
+            .addOnFailureListener { exception ->
+                // Manejar errores
+            }
+    }
+
+    private fun enviarNotificacion(destinatario: String, titulo: String, descripcion: String) {
+        // AquÃ­ irÃ­a la lÃ³gica para enviar la notificaciÃ³n
+        // Mostrar mensaje de envÃ­o correcto
+        Toast.makeText(requireContext(), "NotificaciÃ³n enviada correctamente", Toast.LENGTH_SHORT).show()
+
+        // Regresar a la actividad anterior
+        requireActivity().finish()
+    }
+
+    private val textWatcher = object : TextWatcher {
+        override fun afterTextChanged(s: Editable?) {
+            // Verificar si todos los campos estÃ¡n llenos para habilitar el botÃ³n
+            val titulo = tituloEditText.text.toString().trim()
+            val descripcion = descripcionEditText.text.toString().trim()
+            botonEnviar.isEnabled =
+                titulo.isNotEmpty() && descripcion.isNotEmpty() && destinatarioSeleccionado.isNotEmpty()
+        }
+
+        override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
+        }
+
+        override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
+        }
+    }
+}
